<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:sws="http://www.springframework.org/schema/web-services"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
       http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd">


	<bean id="messageDispatcher"
		class="org.springframework.ws.soap.server.SoapMessageDispatcher">
		<property name="endpointMappings" ref="annotationMapping" />
	</bean>

	<bean id="messageFactory"
		class="org.springframework.ws.soap.axiom.AxiomSoapMessageFactory">
		<property name="soapVersion">
			<util:constant
				static-field="org.springframework.ws.soap.SoapVersion.SOAP_12" />
		</property>
		<property name="payloadCaching" value="true" />
	</bean>

	<bean id="messageReceiver"
		class="org.springframework.ws.soap.server.SoapMessageDispatcher" />

	<bean id="schemaCollection"
		class="org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection">
		<description>
			This bean wraps the LicensePool.xsd and LicensedProduct.xsd
			(which import Service.xsd), and
			inlines them as a one.
		</description>
		<property name="xsds">
			<list>
				<value>classpath:/licensepool/LicensePool.xsd</value>
				<value>classpath:/licensedproduct/LicensedProduct.xsd</value>
			</list>
		</property>
		<property name="inline" value="true" />
	</bean>

	<!-- ===================== ENDPOINTS  ===================================== -->
	<bean id="marshallingLicensePoolEndpoint"
		class="com.pearson.ed.lplc.ws.MarshallingLicensePoolEndpoint">
		<description>
			This endpoint handles the Web Service messages using JAXB
			marshalling.
		</description>
		<property name="licensePoolServiceEndPoint" ref="licensepoolServiceEndPoint" />
		<property name="licensePoolConverter" ref="licensepoolConverter" />
		<property name="exceptionFactory" ref="licensepoolExceptionFactory" />
		<property name="warningFactory" ref="licensepoolWarningFactory" />
	</bean>

	<!-- ===================== ENDPOINT MAPPINGS  ============================== -->

	<!--
		The endpoint mappings map from a request to an endpoint.
	-->

	<bean id="annotationMapping"
		class="org.springframework.ws.server.endpoint.mapping.PayloadRootAnnotationMethodEndpointMapping">
		<description>
			Detects @PayloadRoot annotations on @Endpoint bean methods.
			The MarshallingLicensePoolEndpoint has such annotations. It uses
			two interceptors: one that logs the message payload, and the
			other validates it according to the schema file.
		</description>
		<property name="interceptors">
			<list>
				<bean
					class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor">
					<description>
						This interceptor logs the message payload.
					</description>
				</bean>

				<bean
					class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor">
					<property name="xsdSchemaCollection"
						ref="schemaCollection" />
					<property name="validateRequest" value="true" />
					<property name="validateResponse" value="true" />
				</bean>

			</list>
		</property>
		<property name="order" value="1" />
	</bean>

	
	<bean id="marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPaths">
        	<list>
        		<value>com.pearson.rws.organization.doc._2009._07._01</value>
				<value>com.pearson.rws.licensepool.doc._2009._04._01</value>
				<value>com.pearson.rws.licensedproduct.doc.v2</value>
				<!-- additional client service contracts -->
				<value>com.pearson.rws.order.doc._2009._02._09</value>
				<value>com.pearson.rws.product.doc.v2</value>
        	</list>
        </property>	   
        <property name="mtomEnabled" value="true"/>
    </bean>
    
	<sws:annotation-driven />

	<bean
		class="com.pearson.ed.lp.exception.LicensedProductV2SoapFaultExceptionResolver">
		<description>
			This exception resolver maps exceptions with the @SoapFault
			annotation to SOAP Faults. The business logic exceptions
			will have these.
		</description>
		<property name="order">
			<util:constant static-field="org.springframework.core.Ordered.HIGHEST_PRECEDENCE"/>
		</property>
		<property name="mappedEndpoints">
			<set>
				<value>marshallingLicensedProductWebServiceGateway</value>
			</set>
		</property>
	</bean>

	<bean
		class="org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver">
		<description>
			This exception resolver maps other exceptions to SOAP
			Faults. Both UnmarshallingException and
			ValidationFailureException are mapped to a SOAP Fault with a
			"Client" fault code. All other exceptions are mapped to a
			"Server" error code, the default.
		</description>
		<property name="defaultFault" value="SERVER" />
		<property name="exceptionMappings">
			<props>
				<prop
					key="org.springframework.oxm.UnmarshallingFailureException">
					CLIENT,Invalid request
				</prop>
				<prop
					key="org.springframework.oxm.ValidationFailureException">
					CLIENT,Invalid request
				</prop>
			</props>
		</property>
		<property name="order" value="2" />
	</bean>
</beans>

