<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:ws="http://www.springframework.org/schema/web-services"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd">

	<annotation-config />

	<gateway id="marshallingLicensedProductWebServiceGateway"
		default-request-channel="wsGetLicensedProductRequestChannel"
		service-interface="com.pearson.ed.lp.ws.MarshallingLicensedProductServiceEndpoint"
		error-channel="exceptionTransformationChannel" />

	<transformer input-channel="exceptionTransformationChannel"
		expression="@licensedProductExceptionFactory.getLicensedProductException(payload.getCause().getMessage(), payload.getCause())" />

	<transformer ref="getLicensedProductRequestTransformer"
		input-channel="wsGetLicensedProductRequestChannel" output-channel="licensePoolClientRequestChannel" />

	<splitter ref="licensedProductDetailsRequestSplitter"
		input-channel="licensePoolClientResponseChannel" output-channel="licensedProductDetailsRequestChannel"
		apply-sequence="true" />

	<chain input-channel="licensedProductDetailsRequestChannel">
		<payload-type-router>
			<mapping type="com.pearson.ed.lp.message.ProductEntityIdsRequest"
				channel="productRequestChannel" />
			<mapping type="com.pearson.ed.lp.message.OrderLineItemRequest"
				channel="orderRequestChannel" />
			<mapping type="com.pearson.ed.lp.message.OrganizationDisplayNameRequest"
				channel="organizationRequestChannel" />
			<mapping type="com.pearson.ed.lp.message.LicensePoolResponse"
				channel="getLicensedProductResponseChannel" />
		</payload-type-router>
	</chain>

	<aggregator input-channel="getLicensedProductResponseChannel"
		ref="licensedProductResponseAggregator" 
		send-timeout="${licensedproduct.timeout_in_msec}"/>
		
	<!-- Service Activators - note that the referenced client stubs are provided 
		by another configuration file -->
	<service-activator input-channel="licensePoolClientRequestChannel"
		output-channel="licensePoolClientResponseChannel" ref="licensePoolLifeCycleClient" />
		
	<service-activator input-channel="productRequestChannel"
		output-channel="getLicensedProductResponseChannel" ref="productLifeCycleClient" />
		
	<service-activator input-channel="orderRequestChannel"
		output-channel="getLicensedProductResponseChannel" ref="orderLifeCycleClient" />
		
	<service-activator input-channel="organizationRequestChannel" 
		output-channel="getLicensedProductResponseChannel" ref="organizationLifeCycleClient" />
		
	<!-- channels -->
	<channel id="wsGetLicensedProductRequestChannel" />
	<channel id="exceptionTransformationChannel" />	
	<channel id="licensePoolClientRequestChannel" />
	<channel id="licensePoolClientResponseChannel" />
	<channel id="productRequestChannel" />
	<channel id="orderRequestChannel">
		<dispatcher task-executor="clientPool" />
	</channel>
	<channel id="organizationRequestChannel">
		<dispatcher task-executor="clientPool" />
	</channel>
	<channel id="getLicensedProductResponseChannel" />
	<channel id="licensedProductDetailsRequestChannel" />

    <task:executor id="clientPool" pool-size="${licensedproduct.thread.pool_size}"
        rejection-policy="CALLER_RUNS" keep-alive="${licensedproduct.thread.keep_alive_sec}"
    />
    
	<!-- common beans -->
	<beans:bean id="getLicensedProductRequestTransformer"
		class="com.pearson.ed.lp.transformer.GetLicensedProductRequestTransformer" />

	<beans:bean id="licensedProductDetailsRequestSplitter"
		class="com.pearson.ed.lp.splitter.LicensedProductDetailsRequestSplitter" />
		
	<beans:bean id="licensedProductResponseAggregator"
		class="com.pearson.ed.lp.aggregator.LicensedProductResponseAggregator" />

</beans:beans>
