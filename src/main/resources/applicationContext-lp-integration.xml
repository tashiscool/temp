<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:ws="http://www.springframework.org/schema/web-services"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd">

	<annotation-config />

	<gateway id="marshallingLicensedProductWebServiceGateway"
		default-request-channel="wsGetLicensedProductRequestChannel"
		service-interface="com.pearson.ed.lp.ws.MarshallingLicensedProductServiceEndpoint"
		error-channel="exceptionTransformationChannel" />

	<transformer input-channel="exceptionTransformationChannel"
		expression="@licensedProductExceptionFactory.getLicensedProductException(payload.getCause().getMessage(), payload.getCause())" />

	<transformer ref="getLicensedProductRequestTransformer"
		input-channel="wsGetLicensedProductRequestChannel" output-channel="licensePoolClientRequestChannel" />

	<splitter ref="licensedProductDetailsRequestSplitter"
		input-channel="licensePoolClientResponseChannel" output-channel="licensedProductDetailsRequestChannel"
		apply-sequence="true" />

	

	
		
	<!-- Service Activators - note that the referenced client stubs are provided 
		by another configuration file -->
	<service-activator 
        method="getLicensePoolById"
		input-channel="licensePoolClientRequestChannel"
		output-channel="licensePoolClientResponseChannel" ref="licensePoolLifeCycleClient" />
		
	
		
	
		
	
		
	<!-- channels -->
	<channel id="wsGetLicensedProductRequestChannel" />
	<channel id="exceptionTransformationChannel" />	
	<channel id="licensePoolClientRequestChannel" />
	<channel id="licensePoolClientResponseChannel" />
	
	
	
	
	<channel id="licensedProductDetailsRequestChannel" />

    <task:executor id="clientPool" pool-size="${licensedproduct.thread.pool_size}"
        rejection-policy="CALLER_RUNS" keep-alive="${licensedproduct.thread.keep_alive_sec}"
    />
    
	<!-- common beans -->
	<beans:bean id="getLicensedProductRequestTransformer"
		class="com.pearson.ed.lp.transformer.GetLicensedProductRequestTransformer" />

	<beans:bean id="licensedProductDetailsRequestSplitter"
		class="com.pearson.ed.lp.splitter.LicensedProductDetailsRequestSplitter" />
		
	<beans:bean id="licensedProductResponseAggregator"
		class="com.pearson.ed.lp.aggregator.LicensedProductResponseAggregator" />

	<payload-type-router
		input-channel="licensedProductDetailsRequestChannel">
		 <mapping type="com.pearson.rws.user.doc.v3.GetUsersByAffiliationRequest"
            channel="getUserRequestChannel"
        />
        <mapping type="com.pearson.rws.product.doc.v2.GetProductsByProductEntityIdsRequest"
            channel="getProductRequestChannel"
        />
        <mapping type="com.pearson.rws.product.doc.v2.GetResourcesByProductIdRequest"
            channel="getResourcesRequestChannel"
        />
        <mapping type="com.pearson.rws.organization.doc._2009._07._01.GetChildTreeByOrganizationIdRequest"
            channel="getChildTreeRequestChannel"
        />
        <mapping type="com.pearson.rws.organization.doc._2009._07._01.GetParentTreeByOrganizationIdRequest"
            channel="getParentTreeRequestChannel"
        />
        <mapping type="com.pearson.jms.PasscodeEvent"
            channel="passCodeEventChannel"
        />
	</payload-type-router>
	
	<channel id="getUserRequestChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    <channel id="getProductRequestChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    <channel id="getResourcesRequestChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    <channel id="getChildTreeRequestChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    <channel id="getParentTreeRequestChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    <channel id="passCodeEventChannel">
        <dispatcher task-executor="clientPool" />
    </channel>
    
    <service-activator 
        input-channel="getUserRequestChannel"
        output-channel="responseCollectorChannel"
        ref="userLifeCycle"
        method="getUsersByCriteria"
    />
    <service-activator 
        input-channel="getProductRequestChannel"
        output-channel="responseCollectorChannel"
        ref="productLifeCycle"
        method="getProductsByProductEntityId"
    />
    <service-activator 
        input-channel="getResourcesRequestChannel"
        output-channel="responseCollectorChannel"
        ref="productLifeCycle"
        method="getResourcesByProductId"
    />
    <service-activator 
        input-channel="getChildTreeRequestChannel"
        output-channel="responseCollectorChannel"
        ref="organizationLifeCycle"
        method="getChildTree"
    />
    <service-activator 
        input-channel="getParentTreeRequestChannel"
        output-channel="responseCollectorChannel"
        ref="organizationLifeCycle"
        method="getParentTree"
    />
    <service-activator 
        input-channel="passCodeEventChannel"
        output-channel="responseCollectorChannel"
        ref="jmsPassCodeEvent"
        method="sendMessageToTopic"
    />
    
    <aggregator input-channel="responseCollectorChannel" 
		ref="clientResponseAggregator"
		output-channel="subscribeUserB2BRequestElementChannel"
		send-timeout="${registration.client.timeout_in_msec}"
	/>
	
	<service-activator input-channel="subscribeUserB2BRequestElementChannel"
		ref="subscriptionLifeCycle"
		output-channel="licensingsubscribeUserB2CResponseElementChannel" 
		method="multiThreadedSubscribeUser"
	/>
	
	 <task:executor id="clientPool" pool-size="${registration.client.thread.pool_size}"
        rejection-policy="CALLER_RUNS" keep-alive="${registration.client.thread.keep_alive_sec}"
    />
	 <channel id="responseCollectorChannel"></channel>
	 <channel id="subscribeUserB2BRequestElementChannel"></channel>
</beans:beans>
